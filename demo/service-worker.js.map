{
  "version": 3,
  "sources": ["../src/interfaces/sw.ts", "../src/interfaces/config.ts", "../src/.temp.service-worker.bundle.ts"],
  "sourcesContent": ["/// <reference lib=\"webworker\" />\n\nimport { SwEventName } from './events';\n\n/**\n * Type for the Service Worker global scope, excluding event handlers\n * that will be managed through our hook system\n */\nexport type Sw = Omit<ServiceWorkerGlobalScope, `on${SwEventName}`>;\n\n/**\n * Service Worker global scope, safely handled for both runtime and build time\n */\nexport const SW: Sw = (typeof self !== 'undefined' ? self : {}) as Sw;\n", "export interface SwSetupConfig {\n  target: string;\n  minify: boolean;\n  sourcemap: boolean;\n  debug: boolean;\n  sourcePath: string; // Path to the source file containing event handlers\n}\n\nexport type SwConfig = Pick<SwSetupConfig, 'debug'>;\n\nexport const CONFIG: SwConfig = {\n  debug: false,\n};\n", "\n    // Entry point content\n    \n    \n  /// <reference lib=\"webworker\" />\n  \n  declare const self: ServiceWorkerGlobalScope;\n  declare const CONFIG: { debug: boolean };\n  CONFIG.debug = true;\n  \n  // Initialize hooks container\n  const HOOKS: Record<string, Function> = {};\n\n    function registerEvent(eventName, fn) {\n  if (typeof fn !== 'function') {\n    return;\n  }\n\n  console.log('Registering event successfully: ', eventName);\n  \n  SW.addEventListener(eventName, (event) => {\n    console.log('Event triggered: ', eventName, event);\n\n    fn(event);\n  });\n}\n\n  \n\n    // Source file content\n    import type { ActivateHandler, FetchHandler, InstallHandler } from 'sw-builder';\nimport { SW, CONFIG } from 'sw-builder';\n\n// Example source file (sw-source.ts)\nconst onInstall: InstallHandler = (event) => {\n  console.log('Service Worker installing');\n  // Installation logic\n\n  console.log('Example using config', CONFIG);\n\n  SW.skipWaiting();\n};\n\nconst onActivate: ActivateHandler = (event) => {\n  console.log('Service Worker activating');\n  // Activation logic\n\n  event.waitUntil(SW.clients.claim());\n};\n\nconst onFetch: FetchHandler = (event) => {\n  console.log('Handling fetch event');\n  // Fetch handling logic\n};\n   \n\n    // Initialize HOOKS\n    // Register install event\nregisterEvent(\"install\", onInstall);\n// Register activate event\nregisterEvent(\"activate\", onActivate);\n// Register fetch event\nregisterEvent(\"fetch\", onFetch);\n  "],
  "mappings": ";;AAaO,MAAM,KAAU,OAAO,SAAS,cAAc,OAAO,CAAC;;;ACHtD,MAAM,SAAmB;AAAA,IAC9B,OAAO;AAAA,EACT;;;ACJE,SAAO,QAAQ;AAKb,WAAS,cAAc,WAAW,IAAI;AACxC,QAAI,OAAO,OAAO,YAAY;AAC5B;AAAA,IACF;AAEA,YAAQ,IAAI,oCAAoC,SAAS;AAEzD,OAAG,iBAAiB,WAAW,CAAC,UAAU;AACxC,cAAQ,IAAI,qBAAqB,WAAW,KAAK;AAEjD,SAAG,KAAK;AAAA,IACV,CAAC;AAAA,EACH;AASA,MAAM,YAA4B,CAAC,UAAU;AAC3C,YAAQ,IAAI,2BAA2B;AAGvC,YAAQ,IAAI,wBAAwB,MAAM;AAE1C,OAAG,YAAY;AAAA,EACjB;AAEA,MAAM,aAA8B,CAAC,UAAU;AAC7C,YAAQ,IAAI,2BAA2B;AAGvC,UAAM,UAAU,GAAG,QAAQ,MAAM,CAAC;AAAA,EACpC;AAEA,MAAM,UAAwB,CAAC,UAAU;AACvC,YAAQ,IAAI,sBAAsB;AAAA,EAEpC;AAKA,gBAAc,WAAW,SAAS;AAElC,gBAAc,YAAY,UAAU;AAEpC,gBAAc,SAAS,OAAO;",
  "names": []
}
